#!/usr/bin/env python
# Copyright 2014, Rackspace US, Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
import json
import re

from ansible.module_utils.basic import *

DOCUMENTATION = """
---
module: searchlight
short_description:
    - Module for working with OpenStack Searchlight
description:
    - Module for working with OpenStack Searchlight
options:
    command:
        description:
            - Operation to perform. Options include
        choices:
            - ensure_archive_policy
            - ensure_archive_policy_rule
        required: True
    openrc_path:
        decription:
            - Path to openrc file containing credentials which will be used to
              authorize with Keystone and work with Searchlight.
        required: True
    region_name:
        decription:
            - OpenStack Region Name for the Searchlight service to work with.
              This value is only used when OS_REGION_NAME is not specified in
              the provided openrc file
        required: False
        default: None
    name:
        description:
            - Name assigned to the policy or policy-rule
        required: True
    definition:
        description:
            - Array of dictionaries containing parameters for each entry.
              Required when specifying an archive-policy.
        required: False
        default: None
    back_window:
        description:
            - Back window of the archive policy
        required: False
        default: 0
    aggregation_methods:
        description:
            - Aggregation method of the archive policy. Defaults to Searchlight
              default aggregation methods from configuration when omitted.
        required: False
        default: None
    archive_policy_name:
        description:
            - Name of the archive-policy to use. Required when specifying an
              archive-policy-rule.
        required: False
        default: None
    metric_pattern:
        description:
            - Wildcard string of metric name(s) to match. Required when
              specifying an archive-policy-rule.
        required: False
        default: None

requirements: [ searchlightclient ]
author: Steve Lewis -- https://github.com/stevelle
"""

EXAMPLES = """
# Ensure a given policy exists
  searchlight:
    command: 'ensure_archive_policy'
    openrc_path: '/root/openrc'
    name: 'simple-policy'
    definition:
      - { granularity: '1m', points: 60 }
      - { granularity: '1h', points: 24 }

# Ensure the default policy is set
  searchlight:
    command: 'ensure_archive_policy_rule'
    openrc_path: '/root/openrc'
    name: 'default'
    archive_policy_name: 'low'
    metric_pattern: '*'
"""

COMMAND_MAP = {
    'ensure_archive_policy': {
        'vars': ['name', 'definition', 'back_window', 'aggregation_methods']
    },
    'ensure_archive_policy_rule': {
        'vars': ['name', 'archive_policy_name', 'metric_pattern']
    }
}

# Options accepted by keystoneauth1.identity.generic.password.Password
AUTH_OPTS = ['auth_url', 'tenant_id', 'tenant_name', 'project_id',
             'project_name', 'project_domain_id', 'project_domain_name',
             'domain_id', 'domain_name', 'trust_id', 'username', 'user_id',
             'password', 'user_domain_id', 'user_domain_name']


class ManageSearchlight(object):
    def __init__(self, module):
        self.state_change = False
        self.searchlight = None
        self.module = module
        try:
            self._init_searchlight()
        except Exception as e:
            self.module.fail_json(
                err='Initialisation Error: %s' % e,
                rc=1, msg=str(e))

    def _parse_openrc(self):
        """Get credentials from an openrc file."""
        openrc_path = self.module.params['openrc_path']
        line_re = re.compile('^export (?P<key>OS_\w*)=(?P<value>[^\n]*)')
        with open(openrc_path) as openrc:
            matches = [line_re.match(line) for line in openrc]
            return dict(
                (g.groupdict()['key'].lower()[3:], g.groupdict()['value'])
                for g in matches if g
            )

    def _auth_session(self):
        """Create a keystone auth session."""
        from keystoneauth1.identity.generic import password
        from keystoneauth1 import session

        opts = {k: v for k, v in self._parse_openrc().iteritems()
                if k in AUTH_OPTS}

        auth = password.Password(**opts)
        return session.Session(auth=auth)

    def _init_searchlight(self):
        """Create searchlight client object using token and url from keystone.
        """
        opts = self._parse_openrc()
        params = self.module.params
        interface = opts.get('endpoint_type', 'internal')
        region = opts.get('region_name', params.get('region_name', None))
        if not region:
            self.module.fail_json(msg='Missing region_name in openrc or as '
                                      'option to module')

        try:
            import searchlightclient.v1.client as gclient
        except ImportError:
            self.module.fail_json('Missing searchlightclient')
        else:
            self.searchlight = gclient.Client(
                session=self._auth_session(),
                interface=interface,
                region_name=region)

    def _get_vars(self, variables, required=None):
        """Return a dict of all variables as found within the module.

        :param variables: ``list``  List of all variables that are available to
                                    use within the Keystone Command.
        :param required: ``list``  Name of variables that are required.
        """
        return_dict = {}
        for variable in variables:
            return_dict[variable] = self.module.params.get(variable)
        else:
            if isinstance(required, list):
                for var_name in required:
                    check = return_dict.get(var_name)
                    if check is None:
                        self.failure(
                            error='Missing [ %s ] from Task or found a None'
                                  ' value' % var_name,
                            rc=3,
                            msg='variables %s - available params [ %s ]'
                                % (variables, self.module.params)
                        )
            return return_dict

    def route(self):
        """Run the command as its provided to the module."""
        command_name = self.module.params['command']
        if command_name not in COMMAND_MAP:
            self.module.fail_json(
                error='No Command Found',
                rc=2,
                msg='Command [ %s ] was not found.' % command_name
            )

        action_command = COMMAND_MAP[command_name]
        if hasattr(self, '%s' % command_name):
            action = getattr(self, '%s' % command_name)
            resource = action(vars=action_command['vars'
                                                  ''
                                                  ''])
            if resource is None:
                self.module.exit_json(changed=self.state_change)
            else:
                self.module.exit_json(
                    changed=self.state_change,
                    resource=json.dumps(resource)
                )
        else:
            self.module.fail_json(
                error='Command not in ManageKeystone class',
                rc=2,
                msg='Method [ %s ] was not found.' % command_name
            )

    def ensure_archive_policy(self, vars):
        """Create a new archive policy within Searchlight if it does not exist.

        Returns the policy name on a successful run.

        :param vars: ``list``  List of all variables that are available
                                    to use within the archive policy create
                                    command.
        """
        import searchlightclient.exceptions

        variables = self._get_vars(vars)
        policy_mgr = self.searchlight.archive_policy
        try:
            ap = policy_mgr.get(name=variables.get('name', None))
        except searchlightclient.exceptions.ArchivePolicyNotFound:
            if 'definition' not in vars:
                msg = 'Missing archive policy %s'
                self.module.fail_json(msg=msg % 'definition')

            # remove a blank value, as default
            if ('aggregation_methods' in variables and
                    variables['aggregation_methods'] == ''):
                variables.pop('aggregation_methods')

            self.state_change = True
            try:
                ap = policy_mgr.create(archive_policy=variables)
            except searchlightclient.exceptions.ClientException as e:
                self.module.fail_json(msg='Policy Create Error',
                                      rc=e.code, details=e.message)

        return ap

    def ensure_archive_policy_rule(self, vars):
        """Create a new archive policy rule within Searchlight if it does not
        exist.

        Returns the policy rule name on a successful run.

        :param vars: ``list`` List of all variables that are available to
                                   use within the archive policy rule create
                                   command.
        """
        import searchlightclient.exceptions as exceptions

        variables = self._get_vars(vars)
        named = variables.get('name', None)
        rule_mgr = self.searchlight.archive_policy_rule
        try:
            apr = rule_mgr.get(name=named)
        # NOTE(stevelle) client lib raises wrong exception type.
        # see https://bugs.launchpad.net/python-searchlightclient/+bug/1527402
        except (exceptions.ArchivePolicyRuleNotFound,
                exceptions.ArchivePolicyNotFound):
            self.state_change = True
            try:
                apr = rule_mgr.create(archive_policy_rule=variables)
            except exceptions.ClientException as e:
                self.module.fail_json(msg='Policy Rule Create Error',
                                      rc=e.code, details=e.message)

        return apr


def main():
    module = AnsibleModule(
        argument_spec=dict(
            command=dict(required=True, choices=COMMAND_MAP.keys()),
            openrc_path=dict(required=True),
            region_name=dict(required=False),
            name=dict(required=True),
            definition=dict(required=False),
            back_window=dict(required=False, default='0'),
            aggregation_methods=dict(required=False),
            archive_policy_name=dict(required=False),
            metric_pattern=dict(required=False)
        ),
        supports_check_mode=False
    )
    mg = ManageSearchlight(module)
    mg.route()

if __name__ == '__main__':
    main()
